package main

import (
	"bufio"
	"flag"
	"fmt"
	"net/http"
	"os"
	"strconv"
	"strings"
)

var ipAddrs chan string = make(chan string)

//线程数
var thread chan int = make(chan int)
var nowThread int

//关闭程序
var clo chan bool = make(chan bool)

//根据线程参数启动扫描线程
func runScan() {
	t, ok := <-thread
	nowThread = t
	if ok {
		for i := 0; i < nowThread; i++ {
			go scan()
		}
	}
	//等待线程终止
	for <-thread == 0 {
		nowThread--
		if nowThread == 0 {
			break
		}
	}
}

/**
扫描线程
*/
func scan() {
	s, ok := <-ipAddrs //循环从通道中拿地址
	for ok {
		if strings.Contains(s, ":") {
			resp, err := http.Get(s)
			if err != nil {
				// handle error
			}
			fmt.Println("[" + strconv.Itoa(resp.StatusCode) + "]" + s)
		}
		s, ok = <-ipAddrs //循环从通道中拿地址
	}

	//fmt.Println("[thread-" + threadId + "] end")
	thread <- 0
}

func processFlag(arg []string) {
	var st string
	var sb string
	var x string
	t, err := strconv.Atoi(arg[1])
	if err != nil {
		//线程不合法
		fmt.Println("'thread' Setting error")
		return
	}
	//最大线程2048
	if t < 1 {
		t = 1
	} else if t > 2048 {
		t = 2048
	}
	//传送启动线程数
	thread <- t
	var ff1 []string = make([]string, 0)
	var ff2 []string = make([]string, 0)
	fl, err := os.Open("list.txt")
	if err != nil {
		fmt.Printf("Error: %s\n", err)
		return
	}
	defer fl.Close()
	br := bufio.NewScanner(fl)
	for br.Scan() {
		st = string(br.Text())
		st = strings.Replace(string(st), "\n", "", -1)
		st = strings.Replace(string(st), "\r", "", -1)
		ff1 = append(ff1, st)
	}

	ff, err := os.Open("file.txt")
	if err != nil {
		fmt.Printf("Error: %s\n", err)
		return
	}
	defer ff.Close()
	bf := bufio.NewScanner(ff)
	for bf.Scan() {
		sb = string(bf.Text())
		sb = strings.Replace(string(sb), "\n", "", -1)
		sb = strings.Replace(string(sb), "\r", "", -1)
		ff2 = append(ff2, sb)
	}
	il := len(ff1)
	pl := len(ff2)
	//fmt.Println(il)
	for i := 0; i < il; i++ {
		if strings.Contains(ff1[i], "?") {
			for j := 0; j < pl; j++ {
				fmt.Println(strings.Replace(ff1[i], "?", ff2[j], -1))
				x = strings.Replace(ff1[i], "?", ff2[j], -1)
				ipAddrs <- arg[0] + "/" + x
			}
		} else {
			ipAddrs <- arg[0] + "/" + ff1[i]
		}

	}
	close(ipAddrs)
}

func main() {
	flag.Parse()
	if flag.NArg() != 2 {
		//参数不合法
		fmt.Println("Parameter error")
		return
	}
	args := make([]string, 0, 2)
	for i := 0; i < flag.NArg(); i++ {
		args = append(args, flag.Arg(i))
	}
	//启动扫描线程
	go runScan()
	//参数处理
	processFlag(args)
	//等待退出指令
	<-clo
	fmt.Println("Exit")

}
/* list.txt
index.php
.?.swp
.git
.git/HEAD
.git/index
.git/config
.git/description
README.MD
README.md
README
.gitignore
.svn
?~
.?.swp
.?.swo
.?.swn
.?.swm
.?.swl
_viminfo
.viminfo
?~
?~1~
?~2~
?~3~
?.save
?.save1
?.save2
?.save3
?.bak_Edietplus
?.bak
?.back
phpinfo.php
test.php
.bash_history
*/

/* 
index.php
index.html
search.php
login.php
register.php
test.php
phpinfo.php
t.php
*/
